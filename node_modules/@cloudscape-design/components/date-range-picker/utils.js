// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { joinDateTime, splitDateTime } from '../internal/utils/date-time';
import { isIsoDateOnly } from '../internal/utils/date-time';
import { normalizeTimeString } from '../internal/utils/date-time/join-date-time';
import { setTimeOffset, shiftTimeOffset } from './time-offset';
export function formatValue(value, { timeOffset, dateOnly }) {
    if (!value ||
        value.type === 'relative' ||
        (value.startDate === '' && value.endDate === '' && value.type === 'absolute')) {
        return value;
    }
    if (dateOnly) {
        return {
            type: 'absolute',
            startDate: value.startDate.split('T')[0],
            endDate: value.endDate.split('T')[0],
        };
    }
    return setTimeOffset(value, timeOffset);
}
export function getDefaultMode(value, relativeOptions, rangeSelectorMode) {
    if (value && value.type) {
        return value.type;
    }
    if (rangeSelectorMode === 'relative-only') {
        return 'relative';
    }
    if (rangeSelectorMode === 'absolute-only') {
        return 'absolute';
    }
    return relativeOptions.length > 0 ? 'relative' : 'absolute';
}
export function splitAbsoluteValue(value) {
    if (!value) {
        return {
            start: { date: '', time: '' },
            end: { date: '', time: '' },
        };
    }
    return { start: splitDateTime(value.startDate), end: splitDateTime(value.endDate) };
}
export function joinAbsoluteValue(value) {
    const startTime = normalizeTimeString(value.start.time || '00:00:00');
    const endTime = normalizeTimeString(value.end.time || '23:59:59');
    return {
        type: 'absolute',
        startDate: joinDateTime(value.start.date, startTime),
        endDate: joinDateTime(value.end.date, endTime),
    };
}
export function formatInitialValue(value, dateOnly, normalizedTimeOffset) {
    if ((value === null || value === void 0 ? void 0 : value.type) !== 'absolute') {
        return shiftTimeOffset(value, normalizedTimeOffset);
    }
    if (value.endDate === '' && value.startDate === '') {
        return value;
    }
    if (dateOnly) {
        return formatValue(value, { dateOnly, timeOffset: normalizedTimeOffset });
    }
    return isIsoDateOnly(value.startDate) && isIsoDateOnly(value.endDate)
        ? value
        : shiftTimeOffset(value, normalizedTimeOffset);
}
//# sourceMappingURL=utils.js.map